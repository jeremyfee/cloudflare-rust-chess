/*
 * Chess API
 *
 * api for chess game
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Challenge {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "createdBy")]
    pub created_by: String,
    #[serde(rename = "opponent", deserialize_with = "Option::deserialize")]
    pub opponent: Option<String>,
    #[serde(rename = "playAs", skip_serializing_if = "Option::is_none")]
    pub play_as: Option<crate::models::PieceColor>,
    #[serde(rename = "gameId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub game_id: Option<Option<i32>>,
}

impl Challenge {
    pub fn new(id: String, created_at: String, created_by: String, opponent: Option<String>) -> Challenge {
        Challenge {
            id,
            created_at,
            created_by,
            opponent,
            play_as: None,
            game_id: None,
        }
    }
}


