/*
 * Chess API
 *
 * api for chess game
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChessGame {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "fen")]
    pub fen: String,
    #[serde(rename = "moves")]
    pub moves: Vec<crate::models::GameMove>,
    #[serde(rename = "player1")]
    pub player1: String,
    #[serde(rename = "player2")]
    pub player2: String,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<crate::models::GameStatus>,
    #[serde(rename = "turn", skip_serializing_if = "Option::is_none")]
    pub turn: Option<crate::models::PieceColor>,
}

impl ChessGame {
    pub fn new(id: String, fen: String, moves: Vec<crate::models::GameMove>, player1: String, player2: String) -> ChessGame {
        ChessGame {
            id,
            fen,
            moves,
            player1,
            player2,
            status: None,
            turn: None,
        }
    }
}


